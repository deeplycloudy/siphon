
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/ncss/NCSS_Example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_ncss_NCSS_Example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_ncss_NCSS_Example.py:


==========
Basic NCSS
==========

Use Siphon to query the NetCDF Subset Service (NCSS).

.. GENERATED FROM PYTHON SOURCE LINES 11-18

.. code-block:: default

    from datetime import datetime

    import matplotlib.pyplot as plt
    import numpy as np

    from siphon.catalog import TDSCatalog








.. GENERATED FROM PYTHON SOURCE LINES 19-22

First we construct a TDSCatalog instance pointing to our dataset of interest, in
this case TDS' "Best" virtual dataset for the GFS global 0.5 degree collection of
GRIB files. We see this catalog contains a single dataset.

.. GENERATED FROM PYTHON SOURCE LINES 22-26

.. code-block:: default

    best_gfs = TDSCatalog('http://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/'
                          'Global_0p5deg/catalog.xml?dataset=grib/NCEP/GFS/Global_0p5deg/Best')
    print(best_gfs.datasets)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ['Best GFS Half Degree Forecast Time Series']




.. GENERATED FROM PYTHON SOURCE LINES 27-28

We pull out this dataset and get the NCSS access point

.. GENERATED FROM PYTHON SOURCE LINES 28-31

.. code-block:: default

    best_ds = best_gfs.datasets[0]
    ncss = best_ds.subset()








.. GENERATED FROM PYTHON SOURCE LINES 32-34

We can then use the `ncss` object to create a new query object, which
facilitates asking for data from the server.

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: default

    query = ncss.query()








.. GENERATED FROM PYTHON SOURCE LINES 37-42

We construct a query asking for data corresponding to latitude 40N and longitude 105W,
for the current time. We also ask for NetCDF version 4 data, for the variables
'Temperature_isobaric' and 'Relative_humidity_isobaric'. This request will return all
vertical levels for a single point and single time. Note the string representation of
the query is a properly encoded query string.

.. GENERATED FROM PYTHON SOURCE LINES 42-46

.. code-block:: default

    query.lonlat_point(-105, 40).time(datetime.utcnow())
    query.accept('netcdf4')
    query.variables('Temperature_isobaric', 'Relative_humidity_isobaric')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    var=Temperature_isobaric&var=Relative_humidity_isobaric&time=2021-04-08T21%3A31%3A37.842476&longitude=-105&latitude=40&accept=netcdf4



.. GENERATED FROM PYTHON SOURCE LINES 47-50

We now request data from the server using this query. The `NCSS` class handles parsing
this NetCDF data (using the `netCDF4` module). If we print out the variable names,
we see our requested variables, as well as a few others (more metadata information)

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: default

    data = ncss.get_data(query)
    list(data.variables)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ['isobaric3', 'Temperature_isobaric', 'Relative_humidity_isobaric', 'station_name', 'station_description', 'latitude', 'longitude', 'time']



.. GENERATED FROM PYTHON SOURCE LINES 54-58

We'll pull out the variables we want to use, as well as the pressure values. To get the
name of the correct variable for pressure (which matches the levels for temperature and
relative humidity, we look at the `coordinates` attribute. The last of the variables
listed in `coordinates` is the pressure dimension.

.. GENERATED FROM PYTHON SOURCE LINES 58-71

.. code-block:: default

    temp = data.variables['Temperature_isobaric']
    relh = data.variables['Relative_humidity_isobaric']
    press_name = relh.coordinates.split()[-1]
    press = data.variables[press_name]
    press_vals = press[:].squeeze()

    # Due to a different number of vertical levels find where they are common
    lev_temp = data[next(name for name in temp.coordinates.split() if name.startswith('isobaric'))]
    lev_relh = data[next(name for name in relh.coordinates.split() if name.startswith('isobaric'))]
    _, relh_ind, temp_ind = np.intersect1d(lev_relh, lev_temp, return_indices=True)
    temp_filtered = temp[..., temp_ind]
    relh_filtered = relh[..., relh_ind]








.. GENERATED FROM PYTHON SOURCE LINES 72-73

Now we can plot these up using matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 73-84

.. code-block:: default

    fig, ax = plt.subplots(1, 1, figsize=(9, 8))
    ax.plot(temp_filtered[:].squeeze(), press_vals, 'r', linewidth=2)
    ax.set_xlabel('{} ({})'.format(temp.standard_name, temp.units))
    ax.set_ylabel('{} ({})'.format(press.standard_name, press.units))

    # Create second plot with shared y-axis
    ax2 = plt.twiny(ax)
    ax2.plot(relh_filtered[:].squeeze(), press_vals, 'g', linewidth=2)
    ax2.set_xlabel('{} ({})'.format(relh.standard_name, relh.units))
    ax.set_ylim(press_vals.max(), press_vals.min())
    ax.grid(True)



.. image:: /examples/ncss/images/sphx_glr_NCSS_Example_001.png
    :alt: NCSS Example
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.865 seconds)


.. _sphx_glr_download_examples_ncss_NCSS_Example.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: NCSS_Example.py <NCSS_Example.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: NCSS_Example.ipynb <NCSS_Example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
