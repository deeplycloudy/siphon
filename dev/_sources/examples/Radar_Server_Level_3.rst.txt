
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Radar_Server_Level_3.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Radar_Server_Level_3.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Radar_Server_Level_3.py:


=======================
TDS Radar Query Service
=======================

Use Siphon to get NEXRAD Level 3 data from a TDS.

.. GENERATED FROM PYTHON SOURCE LINES 11-19

.. code-block:: default

    from datetime import datetime

    import matplotlib.pyplot as plt
    import numpy as np

    from siphon.cdmr import Dataset
    from siphon.radarserver import get_radarserver_datasets, RadarServer








.. GENERATED FROM PYTHON SOURCE LINES 20-22

First, point to the top-level thredds radar server accessor to find what datasets are
available.

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default

    ds = get_radarserver_datasets('http://thredds.ucar.edu/thredds/')
    print(list(ds))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ['NEXRAD Level II Radar for Case Study CCS039', 'NEXRAD Level II Radar from IDD', 'NEXRAD Level III Radar for Case Study CCS039', 'NEXRAD Level III Radar from IDD', 'TDWR Level III Radar from IDD']




.. GENERATED FROM PYTHON SOURCE LINES 26-28

Now create an instance of RadarServer to point to the appropriate
radar server access URL. This is pulled from the catalog reference url.

.. GENERATED FROM PYTHON SOURCE LINES 28-31

.. code-block:: default

    url = ds['NEXRAD Level III Radar from IDD'].follow().catalog_url
    rs = RadarServer(url)








.. GENERATED FROM PYTHON SOURCE LINES 32-33

Look at the variables available in this dataset

.. GENERATED FROM PYTHON SOURCE LINES 33-35

.. code-block:: default

    print(rs.variables)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'HHC', 'N2H', 'NST', 'N3U', 'NMD', 'DPR', 'DAA', 'N1X', 'N0S', 'NBC', 'N0R', 'N0X', 'N3H', 'NBQ', 'N0M', 'N1Q', 'N0K', 'NAK', 'N3K', 'N1S', 'OHA', 'NAC', 'N2C', 'N3Q', 'N0Z', 'N3S', 'NAH', 'N2S', 'DU3', 'N1M', 'N0H', 'N2M', 'N3C', 'N0C', 'NET', 'NBU', 'N0Q', 'N2Q', 'NBK', 'DSD', 'N1K', 'NAU', 'N2K', 'NVL', 'PTA', 'NBX', 'N1U', 'DTA', 'N1C', 'N2X', 'NAQ', 'N2U', 'NAX', 'N1P', 'DVL', 'NCR', 'DOD', 'NVW', 'N1H', 'NTP', 'N0V', 'NBM', 'N3X', 'NBH', 'DPA', 'N0U', 'EET', 'N3M', 'NAM', 'DHR', 'DU6', 'DSP'}




.. GENERATED FROM PYTHON SOURCE LINES 36-40

Create a new query object to help request the data. Using the chaining
methods, ask for data from radar FTG (Denver) for now for the product
N0Q, which is reflectivity data for the lowest tilt. We see that when the query
is represented as a string, it shows the encoded URL.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    query = rs.query()
    query.stations('FTG').time(datetime.utcnow()).variables('N0Q')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    var=N0Q&time=2021-04-08T20%3A42%3A21.980378&stn=FTG



.. GENERATED FROM PYTHON SOURCE LINES 44-47

We can use the RadarServer instance to check our query, to make
sure we have required parameters and that we have chosen valid
station(s) and variable(s)

.. GENERATED FROM PYTHON SOURCE LINES 47-49

.. code-block:: default

    rs.validate_query(query)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 50-52

Make the request, which returns an instance of TDSCatalog. This
handles parsing the catalog

.. GENERATED FROM PYTHON SOURCE LINES 52-54

.. code-block:: default

    catalog = rs.get_catalog(query)








.. GENERATED FROM PYTHON SOURCE LINES 55-57

We can look at the datasets on the catalog to see what data we found by the query. We
find one NIDS file in the return.

.. GENERATED FROM PYTHON SOURCE LINES 57-59

.. code-block:: default

    print(catalog.datasets)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ['Level3_FTG_N0Q_20210408_2039.nids']




.. GENERATED FROM PYTHON SOURCE LINES 60-62

We can pull that dataset out of the dictionary and look at the available access URLs.
We see URLs for OPeNDAP, CDMRemote, and HTTPServer (direct download).

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: default

    ds = list(catalog.datasets.values())[0]
    print(ds.access_urls)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'OPENDAP': 'https://thredds.ucar.edu/thredds/dodsC/nexrad/level3/IDD/N0Q/FTG/20210408/Level3_FTG_N0Q_20210408_2039.nids', 'HTTPServer': 'https://thredds.ucar.edu/thredds/fileServer/nexrad/level3/IDD/N0Q/FTG/20210408/Level3_FTG_N0Q_20210408_2039.nids', 'CdmRemote': 'https://thredds.ucar.edu/thredds/cdmremote/nexrad/level3/IDD/N0Q/FTG/20210408/Level3_FTG_N0Q_20210408_2039.nids'}




.. GENERATED FROM PYTHON SOURCE LINES 66-67

We'll use the CDMRemote reader in Siphon and pass it the appropriate access URL.

.. GENERATED FROM PYTHON SOURCE LINES 67-69

.. code-block:: default

    data = Dataset(ds.access_urls['CdmRemote'])








.. GENERATED FROM PYTHON SOURCE LINES 70-73

The CDMRemote reader provides an interface that is almost identical to the usual python
NetCDF interface. We pull out the variables we need for azimuth and range, as well as
the data itself.

.. GENERATED FROM PYTHON SOURCE LINES 73-77

.. code-block:: default

    rng = data.variables['gate'][:] / 1000.
    az = data.variables['azimuth'][:]
    ref = data.variables['BaseReflectivityDR'][:]








.. GENERATED FROM PYTHON SOURCE LINES 78-79

Then convert the polar coordinates to Cartesian

.. GENERATED FROM PYTHON SOURCE LINES 79-83

.. code-block:: default

    x = rng * np.sin(np.deg2rad(az))[:, None]
    y = rng * np.cos(np.deg2rad(az))[:, None]
    ref = np.ma.array(ref, mask=np.isnan(ref))








.. GENERATED FROM PYTHON SOURCE LINES 84-85

Finally, we plot them up using matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 85-90

.. code-block:: default

    fig, ax = plt.subplots(1, 1, figsize=(9, 8))
    ax.pcolormesh(x, y, ref)
    ax.set_aspect('equal', 'datalim')
    ax.set_xlim(-460, 460)
    ax.set_ylim(-460, 460)



.. image:: /examples/images/sphx_glr_Radar_Server_Level_3_001.png
    :alt: Radar Server Level 3
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/siphon/siphon/examples/Radar_Server_Level_3.py:86: MatplotlibDeprecationWarning: shading='flat' when X and Y have the same dimensions as C is deprecated since 3.3.  Either specify the corners of the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud', or set rcParams['pcolor.shading'].  This will become an error two minor releases later.
      ax.pcolormesh(x, y, ref)

    (-460.0, 460.0)




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.049 seconds)


.. _sphx_glr_download_examples_Radar_Server_Level_3.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: Radar_Server_Level_3.py <Radar_Server_Level_3.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: Radar_Server_Level_3.ipynb <Radar_Server_Level_3.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
